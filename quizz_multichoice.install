<?php

/**
 * Sponsored by: Norwegian Centre for Telemedicine
 * Code: falcon
 *
 * @file
 * multichoice Install (a quiz question type)
 */

/**
 * Implements hook_install().
 */
function quizz_multichoice_install() {
  variable_set('node_options_multichoice', array('status'));
}

/**
 * Implements hook_uninstall().
 */
function quizz_multichoice_uninstall() {
  variable_del('multichoice_def_scoring');
  variable_del('multichoice_def_num_of_alts');
  drupal_set_message(t("The multichoice module has been uninstalled. multichoice nodes may still exist, but they will not function properly."));
}

/**
 * Implements hook_schema().
 */
function quizz_multichoice_schema() {
  // Stores the users answers to a question.
  $schema['quiz_multichoice_user_answers'] = array(
      'fields'      => array(
          'id'           => array('type' => 'serial', 'unsigned' => TRUE, 'not null' => TRUE),
          'result_id'    => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE),
          'question_qid' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE),
          'question_vid' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE),
          'choice_order' => array('type' => 'text'),
      ),
      'primary key' => array('id'),
      'indexes'     => array(
          'answer_id' => array('result_id', 'question_qid', 'question_vid'),
      ),
  );

  $schema['quiz_multichoice_user_answer_multi'] = array(
      'fields'      => array(
          'user_answer_id' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE),
          'answer_id'      => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE),
      ),
      'primary key' => array(
          'user_answer_id', 'answer_id'
      ),
      'indexes'     => array(
          'answer_id' => array('user_answer_id'),
      ),
  );

  $schema['quiz_multichoice_properties'] = array(
      'fields'      => array(
          'qid'            => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE),
          'vid'            => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE),
          'choice_multi'   => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0),
          'choice_random'  => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0),
          'choice_boolean' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0),
      ),
      'primary key' => array('qid', 'vid'),
  );

  /*
   * Holds each answer in the answer_collections.
   */
  $schema['quiz_multichoice_answers'] = array(
      'fields'      => array(
          'id'                            => array('type' => 'serial', 'unsigned' => TRUE, 'not null' => TRUE),
          'answer'                        => array('type' => 'text'),
          'answer_format'                 => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE),
          'feedback_if_chosen'            => array('type' => 'text'),
          'feedback_if_chosen_format'     => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE),
          'feedback_if_not_chosen'        => array('type' => 'text'),
          'feedback_if_not_chosen_format' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE),
          'score_if_chosen'               => array('type' => 'int', 'unsigned' => FALSE, 'not null' => TRUE, 'default' => 0),
          'score_if_not_chosen'           => array('type' => 'int', 'unsigned' => FALSE, 'not null' => TRUE, 'default' => 0),
          'question_qid'                  => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE),
          'question_vid'                  => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE),
          'weight'                        => array('type' => 'int', 'unsigned' => FALSE, 'not null' => TRUE, 'default' => 0),
      ),
      'primary key' => array('id'),
      'indexes'     => array('quiz_id' => array('question_qid', 'question_vid'))
  );

  $schema['quiz_multichoice_user_settings'] = array(
      'fields'      => array(
          'uid'            => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE),
          'choice_multi'   => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0),
          'choice_random'  => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0),
          'choice_boolean' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0),
      ),
      'primary key' => array('uid'),
  );
  return $schema;
}

/**
 * Add weights for multichoice alternatives.
 */
function quizz_multichoice_update_7501() {
  db_add_field('quiz_multichoice_answers', 'weight', array('type' => 'int', 'unsigned' => FALSE, 'not null' => TRUE, 'default' => 0));
  db_query('UPDATE {quiz_multichoice_answers} SET weight = id');
  return t('Added weights for multichoice alternatives.');
}

/**
 * Implements hook_quiz_question_upgrade_schema_node_to_entity().
 * Change schema per question structure changed.
 */
function quizz_multichoice_quiz_question_upgrade_schema_node_to_entity() {
  if (db_field_exists('quiz_multichoice_properties', 'nid')) {
    $spec = array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE);
    $spec_2 = array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE);
    $spec_3 = array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE);
    db_change_field('quiz_multichoice_user_answers', 'question_nid', 'question_qid', $spec);
    db_change_field('quiz_multichoice_properties', 'nid', 'qid', $spec_2);
    db_change_field('quiz_multichoice_answers', 'question_nid', 'question_qid', $spec_3);
  }
}

/**
 * Implements hook_quiz_question_upgrade_pre_drop_temp_columns().
 */
function quizz_multichoice_quiz_question_upgrade_pre_drop_temp_columns() {
  // quiz_multichoice_answers
  db_query(
    "UPDATE {quiz_multichoice_answers} as ma"
    . " INNER JOIN {quiz_question_revision} qr ON ma.question_vid = qr.node_vid"
    . " SET ma.question_qid = qr.qid, ma.question_vid = qr.vid"
    . " WHERE 1"
  );

  // quiz_multichoice_properties
  db_query(
    "UPDATE {quiz_multichoice_properties} as mp"
    . " INNER JOIN {quiz_question_revision} qr ON mp.vid = qr.node_vid"
    . " SET mp.qid = qr.qid, mp.vid = qr.vid"
    . " WHERE 1"
  );

  // quiz_multichoice_user_answers
  db_query(
    "UPDATE {quiz_multichoice_user_answers} as ua"
    . " INNER JOIN {quiz_question_revision} qr ON ua.question_vid = qr.node_vid"
    . " SET ua.question_qid = qr.qid, ua.question_vid = qr.vid"
    . " WHERE 1"
  );
}

/**
 * Make sure update script from main module is run before all.
 */
function quizz_multichoice_update_7600() {
  require_once drupal_get_path('module', 'quizz_question') . '/quizz_question.install';
  return quizz_question_update_7600();
}

/**
 * Convert global configuration for questions to question type entity.
 */
function quizz_multichoice_update_7601() {
  foreach (quizz_question_get_types() as $question_type) {
    if ('multichoice' === $question_type->handler) {
      $question_type
        ->setConfig('multichoice_def_num_of_alts', variable_get('multichoice_def_num_of_alts', 2))
        ->setConfig('multichoice_def_scoring', variable_get('multichoice_def_scoring', 0))
        ->save()
      ;
    }
  }
}
